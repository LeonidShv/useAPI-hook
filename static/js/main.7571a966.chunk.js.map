{"version":3,"sources":["hooks/useAPI.js","components/common/Preloader.jsx","components/FetchForm.jsx","components/Data.jsx","components/Info.jsx","App.js","index.js"],"names":["INIT","SUCCESS","FAILURE","REFETCH","fetchDataReducer","state","action","type","status","error","data","refetchNum","Error","useAPI","url","useReducer","dispatch","cachedData","useRef","useEffect","cancelled","a","current","dataFromCache","fetch","response","json","fetchedData","fetchData","rotate","keyframes","StyledPreloader","styled","div","Preloader","Btn","button","SubmitBtn","Input","input","attrs","props","name","id","Paragraph","p","Label","label","FetchForm","onSubmit","query","changeQuery","htmlFor","value","onChange","StyledData","Title","h1","RefetchBtn","Data","refetch","message","onClick","JSON","stringify","StyledInfo","Info","defaultUrl","StyledApp","App","useState","setQuery","fetchUrl","setFetchUrl","e","preventDefault","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7571a966.chunk.js","sourcesContent":["import { useEffect, useRef, useReducer } from \"react\";\r\n\r\n// action types\r\nconst INIT = 'INIT';\r\nconst SUCCESS = 'SUCCESS';\r\nconst FAILURE = 'FAILURE';\r\nconst REFETCH = 'REFETCH';\r\n\r\n// reducer\r\nconst fetchDataReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case INIT:\r\n            return { ...state, status: 'idle', error: null }\r\n        case SUCCESS:\r\n            return { ...state, status: 'success', data: action.data }\r\n        case FAILURE:\r\n            return { ...state, status: 'error', error: action.error }\r\n        case REFETCH:\r\n            return { ...state, refetchNum: state.refetchNum + 1 }\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nconst useAPI = (url) => {\r\n    const initialState = {\r\n        data: null,\r\n        status: '',\r\n        error: null,\r\n        refetchNum: 0\r\n    }\r\n    const [state, dispatch] = useReducer(fetchDataReducer, initialState);\r\n\r\n    // cache\r\n    const cachedData = useRef({});\r\n\r\n    // func for incrementing refetchNumber\r\n    const refetch = () => {\r\n        dispatch({ type: REFETCH });\r\n    }\r\n\r\n    useEffect(() => {\r\n        // flag to prevent dispatching before unmounting\r\n        let cancelled = false;\r\n\r\n        const fetchData = async () => {\r\n            dispatch({ type: INIT });\r\n\r\n            // if we have this key(url) in cache\r\n            if (cachedData.current[url]) {\r\n                const dataFromCache = cachedData.current[url];\r\n\r\n                // set data from cache\r\n                dispatch({ type: 'SUCCESS', data: dataFromCache });\r\n            }\r\n            // if url is new\r\n            else {\r\n                // check for errors\r\n                try {\r\n                    const response = await fetch(url);\r\n                    const fetchedData = await response.json();\r\n\r\n                    // set data to cache \r\n                    cachedData.current[url] = fetchedData;\r\n\r\n                    if (!cancelled) {\r\n                        // set fetched data to state\r\n                        dispatch({ type: SUCCESS, data: fetchedData });\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    if (!cancelled) {\r\n                        // set err if it is\r\n                        dispatch({ type: FAILURE, error: err });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n\r\n        // cancel before unmounting\r\n        return () => {\r\n            cancelled = true;\r\n        };\r\n    }, [url, state.refetchNum]);\r\n\r\n    return [state.data, state.status, state.error, refetch];\r\n}\r\n\r\nexport default useAPI;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst rotate = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst StyledPreloader = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n\r\n    div {\r\n        box-sizing: border-box;\r\n        display: block;\r\n        position: absolute;\r\n        width: 64px;\r\n        height: 64px;\r\n        margin: 8px;\r\n        border: 8px solid black;\r\n        border-radius: 50%;\r\n        animation: ${rotate} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n        border-color: black transparent transparent transparent;\r\n    }\r\n\r\n    div:nth-child(1) {\r\n        animation-delay: -0.45s;\r\n    }\r\n    div:nth-child(2) {\r\n        animation-delay: -0.3s;\r\n    }\r\n    div:nth-child(3) {\r\n        animation-delay: -0.15s;\r\n    }\r\n`;\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <StyledPreloader>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </StyledPreloader>\r\n    );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    font-weight: 700;\r\n    color: white;\r\n    text-decoration: none;\r\n    border-radius: 3px;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    border: none;\r\n`;\r\n\r\nconst SubmitBtn = styled(Btn)`\r\n    &:hover {\r\n        background: rgb(53, 167, 110);\r\n    }\r\n\r\n    background: rgb(64, 199, 129);\r\n    box-shadow: 0 -3px rgb(53, 167, 110) inset;\r\n    padding: 11px 10px 12px 10px;\r\n    margin: 0 10px;\r\n`;\r\n\r\nconst Input = styled.input.attrs((props) => ({\r\n    type: 'text',\r\n    name: 'query',\r\n    id: 'query',\r\n}))`\r\n    padding: 10px;\r\n    width: 300px;\r\n    border-radius: 3px;\r\n    border: 1px solid grey;\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    display: inline-block;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: block;\r\n    font-size: 20px;\r\n    padding-bottom: 10px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst FetchForm = ({ onSubmit, query, changeQuery }) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <Paragraph>\r\n                <Label htmlFor='query'>Query:</Label>\r\n                <Input\r\n                    name='query'\r\n                    id='query'\r\n                    value={query}\r\n                    onChange={changeQuery}\r\n                />\r\n            </Paragraph>\r\n            <Paragraph>\r\n                <SubmitBtn type='submit'>Fetch Data</SubmitBtn>\r\n            </Paragraph>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FetchForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Preloader from './common/Preloader';\r\nimport { Btn } from './FetchForm';\r\n\r\nconst StyledData = styled.div`\r\n    width: 100%;\r\n    max-width: 50%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    text-align: center;\r\n`;\r\n\r\nconst RefetchBtn = styled(Btn)`\r\n    &:hover {\r\n        background: #bd8b17;\r\n    }\r\n\r\n    padding: 11px 15px 12px 15px;\r\n    background: #f5bf42;\r\n    margin: 0;\r\n    box-shadow: 0 -3px #bd8b17 inset;\r\n`;\r\n\r\nconst Data = ({ status, data, error, refetch }) => {\r\n    if (status === 'idle') {\r\n        return (\r\n            <StyledData>\r\n                <Preloader />\r\n            </StyledData>\r\n        );\r\n    }\r\n\r\n    if (status === 'error') {\r\n        return (\r\n            <StyledData>\r\n                <p>Oops! Something went wrong.</p>\r\n                <p>Error: {error.message}</p>\r\n                <RefetchBtn type='button' onClick={refetch}>\r\n                    Retry\r\n                </RefetchBtn>\r\n            </StyledData>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <StyledData>\r\n            <Title>Data:</Title>\r\n            <code>{JSON.stringify(data)}</code>\r\n        </StyledData>\r\n    );\r\n};\r\n\r\nexport default Data;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledInfo = styled.div`\r\n    width: 100%;\r\n    max-width: 50%;\r\n`;\r\n\r\nconst Info = ({ defaultUrl, query }) => {\r\n    return (\r\n        <StyledInfo>\r\n            <h2>Default url:</h2>\r\n            {defaultUrl}\r\n            <h2>Query:</h2>\r\n            {query}\r\n            <h2>Full url:</h2>\r\n            {defaultUrl + query}\r\n        </StyledInfo>\r\n    );\r\n};\r\n\r\nexport default Info;\r\n","import React, { useState } from 'react';\nimport useAPI from './hooks/useAPI';\nimport Data from './components/Data'\nimport Info from './components/Info'\nimport FetchForm from './components/FetchForm';\nimport styled from 'styled-components';\n\nconst StyledApp = styled.div`\n    display:flex;\n    flex-direction:column;\n    align-items:center;\n    padding:10px;\n`;\n\nconst App = () => {\n    const defaultUrl = 'https://hacker-news.firebaseio.com/v0';\n\n    const [query, setQuery] = useState('/item/2921983.json?print=pretty');\n    const [fetchUrl, setFetchUrl] = useState(defaultUrl + query);\n    const [data, status, error, refetch] = useAPI(fetchUrl);\n\n    const handleSubmit = (e) => {\n        setFetchUrl(defaultUrl + query)\n        e.preventDefault();\n    }\n\n    const changeQuery = (e) => {\n        setQuery(e.target.value);\n    }\n\n    return (\n        <StyledApp>\n            <FetchForm onSubmit={handleSubmit} query={query} changeQuery={changeQuery} />\n            <Info defaultUrl={defaultUrl} query={query} />\n            <Data status={status} data={data} error={error} refetch={refetch} />\n        </StyledApp >\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'));\n\n\n\n\n\n\n\n"],"sourceRoot":""}